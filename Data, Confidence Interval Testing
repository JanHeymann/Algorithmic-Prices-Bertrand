import csv
start_price_A = 10
start_price_B = 10

with open('convergence.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    for t in range(50):
        price_history_A, price_history_B, reward, time = simulate_bertrand_rl(start_price_A=start_price_A, start_price_B=start_price_B)
        print(t)
        writer.writerow([price_history_B[-1]])  

import pandas as pd
from scipy import stats

df = pd.read_csv('convergence.csv', header =None)
final_price = df[0]

t_stat, p_value = stats.ttest_1samp(final_price, 10)

print(f"Final Price: {final_price}")
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

if p_value < 0.05:
    print("The final price is significantly different from 10.")
else:
    print("The final price is not significantly different from 10.")

mean_price = final_price.mean()
std_price = final_price.std()
n = len(final_price)

alpha = 0.05  
t_critical = stats.t.ppf(1 - alpha / 2, df=n - 1)

margin_of_error = t_critical * (std_price / np.sqrt(n))

ci_lower = mean_price - margin_of_error
ci_upper = mean_price + margin_of_error

print(f"Mean Price: {mean_price:.4f}")
print(f"Standard Deviation: {std_price:.4f}")
print(f"Sample Size: {n}")
print(f"95% Confidence Interval: ({ci_lower:.4f}, {ci_upper:.4f})")

alpha = 0.01  
t_critical = stats.t.ppf(1 - alpha / 2, df=n - 1)

margin_of_error = t_critical * (std_price / np.sqrt(n))

ci_lower = mean_price - margin_of_error
ci_upper = mean_price + margin_of_error

print(f"Mean Price: {mean_price:.4f}")
print(f"Standard Deviation: {std_price:.4f}")
print(f"Sample Size: {n}")
print(f"95% Confidence Interval: ({ci_lower:.4f}, {ci_upper:.4f})")

alpha = 0.001 
t_critical = stats.t.ppf(1 - alpha / 2, df=n - 1)

margin_of_error = t_critical * (std_price / np.sqrt(n))

ci_lower = mean_price - margin_of_error
ci_upper = mean_price + margin_of_error

print(f"Mean Price: {mean_price:.4f}")
print(f"Standard Deviation: {std_price:.4f}")
print(f"Sample Size: {n}")
print(f"95% Confidence Interval: ({ci_lower:.4f}, {ci_upper:.4f})")
