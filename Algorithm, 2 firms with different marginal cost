class Firm_diffmc:
    def __init__(self, mc, price_floor, price_cap, learning_rate=0.85, discount_factor=0.9):
        self.mc = mc
        self.price_floor = price_floor
        self.price_cap = price_cap
        self.learning_rate = learning_rate
        self.discount_factor = discount_factor
        self.q_table = {}
    def get_state(self, price_A, price_B):
        return (round(price_A, 2), round(price_B, 2))
    def get_action(self, state):
        if state not in self.q_table:
            self.q_table[state] = {0: 0, 1: 0, 2: 0}
        if np.random.rand() < 0.1:
            return np.random.choice([0, 1, 2])
        else:
            return max(self.q_table[state], key=self.q_table[state].get)
    def update_q_value(self, state, action, reward, next_state):
        if next_state not in self.q_table:
            self.q_table[next_state] = {0: 0, 1: 0, 2: 0}
        best_next_action = max(self.q_table[next_state], key=self.q_table[next_state].get)        
        
        last_price_effect = 0.5 * (next_state[1] - self.mc)        
        scaled_reward = reward + last_price_effect
        self.q_table[state][action] += self.learning_rate * (scaled_reward + self.discount_factor * self.q_table[next_state][best_next_action] - self.q_table[state][action])
    def calculate_profit(self, price):
        quantity_sold = 100 - price
        return (price - self.mc) * max(quantity_sold, 0)
def simulate_bertrand_diffmc(max_iterations=500000, price_floor=10, price_cap=55, start_price_A=None, start_price_B=None):
    firm_A = Firm(mc=10, price_floor=price_floor, price_cap=price_cap)
    firm_B = Firm(mc=20, price_floor=20, price_cap=price_cap)

    price_A = start_price_A if start_price_A is not None else np.random.uniform(price_floor, price_cap)
    price_B = start_price_B if start_price_B is not None else np.random.uniform(price_floor, price_cap)
    price_history_A = [start_price_A]
    price_history_B = [start_price_B]
    reward = []
    convergence = []
    tolerance = 3
    check_interval = 100000
    stable_count = 0
    min_check_iterations = 500000
    for i in range(max_iterations):
        state_A = firm_A.get_state(price_A, price_B)
        state_B = firm_B.get_state(price_B, price_A)
        action_A = firm_A.get_action(state_A)
        action_B = firm_B.get_action(state_B)

        if price_history_A[i-1] < price_history_B[i-1]:
            price_A = min(price_B, 55)
        else:
            if action_A == 0:
                price_A = max(price_A - 1, price_floor)
            elif action_A == 2:
                price_A = min(price_A + 1, price_cap)                
        if price_history_A[i-1] > price_history_B[i-1]:
            price_B = min(price_history_A[i-1], 55)
        else:
            if action_B == 0:
                price_B = max(price_B - 1, 20)
            elif action_B == 2:
                price_B = min(price_B + 1, price_cap)
        if price_A > price_B:  
            profit_A = 0
            profit_B = firm_B.calculate_profit(price_B)            
        if price_A < price_B:
            profit_A = firm_A.calculate_profit(price_A)
            profit_B = 0
        if price_A == price_B:
            profit_A = firm_A.calculate_profit(price_A)
            profit_B = firm_B.calculate_profit(price_B)        

        firm_A.last_price = price_B
        firm_B.last_price = price_A

        firm_A.update_q_value(state_A, action_A, profit_A, firm_A.get_state(price_A, price_B))
        firm_B.update_q_value(state_B, action_B, profit_B, firm_B.get_state(price_B, price_A))

        price_history_A.append(price_A)
        price_history_B.append(price_B)
        reward.append(profit_A)
        reward.append(profit_B)
     return price_history_A, price_history_B, reward, convergence
price_diff_mc_A, price_diff_mc_B, reward_diff_mc, time_diff_mc = simulate_bertrand_diffmc(max_iterations=500000, price_floor=10, price_cap=55, start_price_A=10, start_price_B=20)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7))
window_size = 1000
moving_avg_Adiff = pd.Series(price_diff_mc_A).rolling(window=window_size).mean()
moving_avg_Bdiff = pd.Series(price_diff_mc_B).rolling(window=window_size).mean()

ax1.plot(moving_avg_Adiff[:250000], label='Firm A Moving Average', color='#1f77b4', linewidth=2, alpha=0.8)
ax1.axhline(y=10, color='red', linestyle='--', linewidth=1.5, label='Marginal Cost (MC = 10)')
ax1.axhline(y=55, color='blue', linestyle='-', linewidth=1.5, label='Monopoly Price (p = 55)')
ax1.set_xlabel('Iterations', fontsize=14, fontweight='bold')
ax1.set_ylabel('Price', fontsize=14, fontweight='bold')
ax1.set_title('Price Evolution of Firm A Over Time', fontsize=16, fontweight='bold', pad=20)
ax1.ticklabel_format(style='plain', axis='x')
ax1.legend(loc='lower right', fontsize=12, frameon=True, fancybox=True, shadow=True, borderpad=1)
ax1.set_ylim(bottom=0)  

ax2.plot(moving_avg_Bdiff[:250000], label='Firm B Moving Average', color='#ff7f0e', linewidth=2, alpha=0.8)
ax2.axhline(y=20, color='red', linestyle='--', linewidth=1.5, label='Marginal Cost (MC = 20)')
ax2.axhline(y=55, color='blue', linestyle='-', linewidth=1.5, label='Monopoly Price (p = 55)')
ax2.set_xlabel('Iterations', fontsize=14, fontweight='bold')
ax2.set_title('Price Evolution of Firm B Over Time', fontsize=16, fontweight='bold', pad=20)
ax2.ticklabel_format(style='plain', axis='x')
ax2.legend(loc='lower right', fontsize=12, frameon=True, fancybox=True, shadow=True, borderpad=1)
ax2.set_ylim(bottom=0) 

plt.tight_layout()
plt.savefig('movingaverage_A_B_diff_mc.png', format='png', dpi=300)
plt.show()
